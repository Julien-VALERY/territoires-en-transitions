(()=>{var e={586:(e,t,n)=>{var i=n(589),r=n(708),s=r;s.v1=i,s.v4=r,e.exports=s},726:e=>{for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);e.exports=function(e,n){var i=n||0,r=t;return[r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]]].join("")}},338:e=>{var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},589:(e,t,n)=>{var i,r,s=n(338),a=n(726),o=0,c=0;e.exports=function(e,t,n){var l=t&&n||0,u=t||[],d=(e=e||{}).node||i,h=void 0!==e.clockseq?e.clockseq:r;if(null==d||null==h){var f=s();null==d&&(d=i=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==h&&(h=r=16383&(f[6]<<8|f[7]))}var p=void 0!==e.msecs?e.msecs:(new Date).getTime(),m=void 0!==e.nsecs?e.nsecs:c+1,g=p-o+(m-c)/1e4;if(g<0&&void 0===e.clockseq&&(h=h+1&16383),(g<0||p>o)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");o=p,c=m,r=h;var v=(1e4*(268435455&(p+=122192928e5))+m)%4294967296;u[l++]=v>>>24&255,u[l++]=v>>>16&255,u[l++]=v>>>8&255,u[l++]=255&v;var $=p/4294967296*1e4&268435455;u[l++]=$>>>8&255,u[l++]=255&$,u[l++]=$>>>24&15|16,u[l++]=$>>>16&255,u[l++]=h>>>8|128,u[l++]=255&h;for(var y=0;y<6;++y)u[l+y]=d[y];return t||a(u)}},708:(e,t,n)=>{var i=n(338),r=n(726);e.exports=function(e,t,n){var s=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||i)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var o=0;o<16;++o)t[s+o]=a[o];return t||r(a)}}},t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}(()=>{"use strict";const e=e=>null!=e.id&&null!=e.pathname;class t{constructor({epci_id:e,indicateur_id:t,year:n,value:i}){this.epci_id=e,this.indicateur_id=t,this.year=n,this.value=i}get pathname(){return t.pathname}}t.pathname="indicateur_value";class i extends t{static buildId(e,t,n){return`${e}/${t}/${n}`}get id(){return i.buildId(this.epci_id,this.indicateur_id,this.year)}}class r{constructor({host:e,endpoint:t,serializer:n,deserializer:i}){this.host=e,this.pathname=t,this.serializer=n,this.deserializer=i}async store(t){if(!e(t))throw new Error(typeof t+" is not storable.");const n=await fetch(`${this.host}/${this.pathname}/`,{method:"POST",mode:"cors",body:JSON.stringify(this.serializer(t))});return this.deserializer(await n.json())}async retrieveAll(){return this.retrieveAtPath("all")}async retrieveById(e){return this.retrieveByPath(e)}async retrieveByPath(e){const t=await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"GET"});return 404==t.status?null:this.deserializer(await t.json())}async retrieveAtPath(e){const t=await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"GET"}),n=await t.json(),i=[];for(let e=0;e<n.length;e++)i.push(this.deserializer(n[e]));return i}async deleteById(e){return 200==(await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"DELETE"})).status}}const s=()=>{const e=new URLSearchParams(window.location.search).get("epci_id");if(!e)throw new Error("Parameter epci_id is empty.");return e};class a{constructor({action_id:e,epci_id:t,avancement:n}){this.action_id=e,this.epci_id=t,this.avancement=n}get pathname(){return a.pathname}}a.pathname="action_status";class o extends a{static buildId(e,t){return`${e}/${t}`}get id(){return o.buildId(this.epci_id,this.action_id)}}class c{constructor({uid:e,epci_id:t,mesure_id:n,name:i,description:r}){this.uid=e,this.epci_id=t,this.mesure_id=n,this.name=i,this.description=r}get pathname(){return c.pathname}}c.pathname="action_custom";class l extends c{static buildId(e,t,n){return`${e}/${t}/${n}`}get id(){return l.buildId(this.epci_id,this.mesure_id,this.uid)}}const u=()=>{const e=window.location.hostname;if("localhost"===e.substring(0,10))return"http://localhost:8000";if("sandbox.territoiresentransitions.fr"===e)return"https://sandboxterritoires.osc-fr1.scalingo.io";if("staging.territoiresentransitions.fr"===e)return"https://territoiresentransitions.osc-fr1.scalingo.io";throw`no API host for ${e}`};class d{constructor({uid:e,epci_id:t,climat_pratic_thematic_id:n,name:i}){this.uid=e,this.epci_id=t,this.climat_pratic_thematic_id=n,this.name=i}get pathname(){return d.pathname}}d.pathname="mesure_custom";class h extends d{static buildId(e,t){return`${e}/${t}`}get id(){return h.buildId(this.epci_id,this.uid)}}class f{constructor({host:e,endpoint:t,serializer:n,deserializer:i}){this.cache=null,this.retrieving=null,this.host=e,this.pathname=t,this.serializer=n,this.deserializer=i,this.api=new r({host:this.host,endpoint:this.pathname,serializer:this.serializer,deserializer:this.deserializer})}async store(t){if(!e(t))throw new Error(typeof t+" is not storable.");const n=await this.api.store(t);return this.writeInCache(n)}retrieveAll(){return this.getCache()}async retrieveById(e){return this.retrieveByPath(e)}async retrieveByPath(e){const t=await this.getCache();for(let n of t)if(n.id.startsWith(e))return n;return null}async retrieveAtPath(e){const t=await this.getCache(),n=[];for(let i of t)i.id.startsWith(e)&&n.push(i);return n}async deleteById(e){const t=await this.api.deleteById(this.stripId(e)),n=await this.getCache();return this.cache=n.filter((t=>t.id!==e)),t}stripId(e){const t=this.pathname.split("/");let n=e.split("/"),i=!1;for(let e=0;e<t.length;e++)if(t[e]==n[0])i=!0,n=n.slice(1);else if(i)break;return n.join("/")}async writeInCache(e){await this.removeFromCache(e.id);const t=await this.getCache();return t.push(e),this.cache=t,e}async removeFromCache(e){const t=await this.getCache(),n=t.filter((t=>t.id!==e)),i=n.length!=t.length;return this.cache=n,i}async getCache(){return null!==this.cache?this.cache:(null===this.retrieving&&(this.retrieving=this.api.retrieveAll(),this.retrieving.then((e=>{this.cache=e}))),this.retrieving)}}const p=new f({host:u(),endpoint:`v1/${t.pathname}/${s()}`,serializer:e=>e,deserializer:e=>new i(e)}),m=new f({host:u(),endpoint:`v1/${a.pathname}/${s()}`,serializer:e=>e,deserializer:e=>new o(e)}),g=new f({host:u(),endpoint:`v1/${c.pathname}/${s()}`,serializer:e=>e,deserializer:e=>new l(e)}),v=(new f({host:u(),endpoint:`v1/${d.pathname}/${s()}`,serializer:e=>e,deserializer:e=>new h(e)}),s());document.querySelectorAll(".status").forEach((e=>(e=>{let t=e.dataset.actionId||"",n=e.querySelectorAll('input[type="radio"]');((e,t)=>{let n=t=>{const n=t.target.value,i=new o({epci_id:v,action_id:e,avancement:n});m.store(i)};t.forEach((e=>{e.addEventListener("change",n)}))})(t,n),(async(e,t)=>{let n="pas_faite";try{const i=await m.retrieveById(`${v}/${e}`);i&&(n=i.avancement)}catch(e){}finally{const i=`action-${e}_${n}`;t.forEach((e=>{e.id===i&&(e.checked=!0)}))}})(t,n)})(e)));const $=e=>{e.preventDefault()},y=e=>{const t=e.target,{id:n,year:r}=_(t),a=s(),o=new i({epci_id:a,indicateur_id:n,year:r,value:t.value});p.store(o)},w=e=>{"Enter"===e.key&&e.target.blur()},b=async e=>{e.value="",e.addEventListener("blur",y),e.addEventListener("keypress",w)},_=e=>({id:e.dataset.indicatorId,year:+e.dataset.indicatorYear});function x(){}function E(e){return e()}function k(){return Object.create(null)}function z(e){e.forEach(E)}function C(e){return"function"==typeof e}function A(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function I(e){return 0===Object.keys(e).length}function P(e,t){e.appendChild(t)}function S(e,t,n){e.insertBefore(t,n||null)}function L(e){e.parentNode.removeChild(e)}function q(e){return document.createElement(e)}function B(e){return document.createTextNode(e)}function T(){return B(" ")}function N(e,t,n,i){return e.addEventListener(t,n,i),()=>e.removeEventListener(t,n,i)}function j(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function V(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function O(e,t){e.value=null==t?"":t}function R(e,t,n){e.classList[n?"add":"remove"](t)}let M;function D(e){M=e}document.querySelectorAll('[data-component="indicatorForm"]').forEach((e=>{(async e=>{e.addEventListener("submit",$);const t=e.querySelectorAll("input");for(let e of t)b(e);const{id:n,year:i}=_(t[0]),r=s(),a=await p.retrieveAtPath(`${r}/${n}`);for(let e of t){const{id:t,year:n}=_(e);let i="";for(let e of a)e.year==n&&e.indicateur_id==t&&(i=e.value);e.value=i}})(e)})),new Set,new Set;const F=[],U=[],G=[],H=[],W=Promise.resolve();let J=!1;function Y(e){G.push(e)}let K=!1;const Q=new Set;function X(){if(!K){K=!0;do{for(let e=0;e<F.length;e+=1){const t=F[e];D(t),Z(t.$$)}for(D(null),F.length=0;U.length;)U.pop()();for(let e=0;e<G.length;e+=1){const t=G[e];Q.has(t)||(Q.add(t),t())}G.length=0}while(F.length);for(;H.length;)H.pop()();J=!1,K=!1,Q.clear()}}function Z(e){if(null!==e.fragment){e.update(),z(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Y)}}const ee=new Set;let te;function ne(e,t){e&&e.i&&(ee.delete(e),e.i(t))}function ie(e,t,n){const{fragment:i,on_mount:r,on_destroy:s,after_update:a}=e.$$;i&&i.m(t,n),Y((()=>{const t=r.map(E).filter(C);s?s.push(...t):z(t),e.$$.on_mount=[]})),a.forEach(Y)}function re(e,t){const n=e.$$;null!==n.fragment&&(z(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function se(e,t,n,i,r,s,a=[-1]){const o=M;D(e);const c=e.$$={fragment:null,ctx:null,props:s,update:x,not_equal:r,bound:k(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(o?o.$$.context:[]),callbacks:k(),dirty:a,skip_bound:!1};let l=!1;if(c.ctx=n?n(e,t.props||{},((t,n,...i)=>{const s=i.length?i[0]:n;return c.ctx&&r(c.ctx[t],c.ctx[t]=s)&&(!c.skip_bound&&c.bound[t]&&c.bound[t](s),l&&function(e,t){-1===e.$$.dirty[0]&&(F.push(e),J||(J=!0,W.then(X)),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n})):[],c.update(),l=!0,z(c.before_update),c.fragment=!!i&&i(c.ctx),t.target){if(t.hydrate){const e=(u=t.target,Array.from(u.childNodes));c.fragment&&c.fragment.l(e),e.forEach(L)}else c.fragment&&c.fragment.c();t.intro&&ne(e.$$.fragment),ie(e,t.target,t.anchor),X()}var u;D(o)}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global,new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]),"function"==typeof HTMLElement&&(te=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,n){this[e]=n}$destroy(){re(this,1),this.$destroy=x}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!I(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});class ae{$destroy(){re(this,1),this.$destroy=x}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!I(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function oe(e){let t,n,i,r,s;return{c(){t=q("button"),n=B(e[0]),j(t,"class",i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:"")),R(t,"w-full",e[1])},m(i,a){S(i,t,a),P(t,n),r||(s=N(t,"click",e[8]),r=!0)},p(e,r){1&r&&V(n,e[0]),36&r&&i!==(i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:""))&&j(t,"class",i),38&r&&R(t,"w-full",e[1])},d(e){e&&L(t),r=!1,s()}}}function ce(e){let t,n,i;return{c(){t=q("a"),n=B(e[0]),j(t,"href",e[4]),j(t,"class",i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:"")),R(t,"w-full",e[1])},m(e,i){S(e,t,i),P(t,n)},p(e,r){1&r&&V(n,e[0]),16&r&&j(t,"href",e[4]),36&r&&i!==(i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:""))&&j(t,"class",i),38&r&&R(t,"w-full",e[1])},d(e){e&&L(t)}}}function le(e){let t;function n(e,t){return e[3]?ce:oe}let i=n(e),r=i(e);return{c(){r.c(),t=B("")},m(e,n){r.m(e,n),S(e,t,n)},p(e,[s]){i===(i=n(e))&&r?r.p(e,s):(r.d(1),r=i(e),r&&(r.c(),r.m(t.parentNode,t)))},i:x,o:x,d(e){r.d(e),e&&L(t)}}}function ue(e,t,n){var i,r;!function(e){e[e.nettle=0]="nettle",e[e.bramble=1]="bramble"}(i||(i={})),function(e){e[e.normal=0]="normal",e[e.small=1]="small"}(r||(r={}));let{label:s=""}=t,{full:a=!1}=t,{classNames:o=""}=t,{colorVariant:c="nettle"}=t,{size:l="normal"}=t,{asLink:u=!1}=t,{href:d=""}=t,h="";return"nettle"==c&&(h+=" border-green-700 border-2 hover:bg-green-100 active:bg-green-600"),"bramble"==c&&(h+=" border-gray-800 border hover:bg-green-100 active:bg-green-600"),"normal"==l&&(h+=" px-6 py-3"),"small"==l&&(h+=" text-base px-3 py-3"),e.$$set=e=>{"label"in e&&n(0,s=e.label),"full"in e&&n(1,a=e.full),"classNames"in e&&n(2,o=e.classNames),"colorVariant"in e&&n(6,c=e.colorVariant),"size"in e&&n(7,l=e.size),"asLink"in e&&n(3,u=e.asLink),"href"in e&&n(4,d=e.href)},[s,a,o,u,d,h,c,l,function(t){!function(e,t){const n=e.$$.callbacks[t.type];n&&n.slice().forEach((e=>e(t)))}(e,t)}]}const de=class extends ae{constructor(e){super(),se(this,e,ue,le,A,{label:0,full:1,classNames:2,colorVariant:6,size:7,asLink:3,href:4})}};var he=n(586);function fe(e){let t,n,i,r,s,a,o,c,l,u,d,h,f,p,m,g,v,$;return m=new de({props:{full:!0,label:"Valider",classNames:"md:w-1/3 self-end"}}),m.$on("click",e[2]),{c(){var e;t=q("section"),n=q("h1"),n.textContent="Ajouter une action",i=T(),r=q("div"),s=q("label"),s.textContent="Nom",a=T(),o=q("input"),c=T(),l=q("div"),u=T(),d=q("label"),d.textContent="Description",h=T(),f=q("textarea"),p=T(),(e=m.$$.fragment)&&e.c(),j(n,"class","text-4xl font-semibold pb-20"),j(s,"for","mesure_create_name"),j(o,"id","mesure_create_name"),j(o,"class","border border-gray-300 p-2 my-2 focus:outline-none focus:ring-2 ring-green-100"),j(l,"class","p-5"),j(d,"for","mesure_create_description"),j(f,"id","mesure_create_description"),j(f,"class","border border-gray-300 p-2 my-2 focus:outline-none focus:ring-2 ring-green-100"),j(r,"class","flex flex-col w-full md:w-3/4 pb-10"),j(t,"class","flex flex-col")},m(y,w){S(y,t,w),P(t,n),P(t,i),P(t,r),P(r,s),P(r,a),P(r,o),O(o,e[0]),P(r,c),P(r,l),P(r,u),P(r,d),P(r,h),P(r,f),O(f,e[1]),P(t,p),ie(m,t,null),g=!0,v||($=[N(o,"input",e[3]),N(f,"input",e[4])],v=!0)},p(e,[t]){1&t&&o.value!==e[0]&&O(o,e[0]),2&t&&O(f,e[1])},i(e){g||(ne(m.$$.fragment,e),g=!0)},o(e){(function(e,t,n,i){if(e&&e.o){if(ee.has(e))return;ee.add(e),(void 0).c.push((()=>{ee.delete(e),i&&(n&&e.d(1),i())})),e.o(t)}})(m.$$.fragment,e),g=!1},d(e){e&&L(t),re(m),v=!1,z($)}}}function pe(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function a(e){try{c(i.next(e))}catch(e){s(e)}}function o(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((i=i.apply(e,t||[])).next())}))};const r=s(),a=(e=>{e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");const t=new RegExp("[\\?&]"+e+"=([^&#]*)").exec(location.search);return null===t?"":decodeURIComponent(t[1].replace(/\+/g," "))})("mesure_uid");let o="",c="";return[o,c,()=>i(void 0,void 0,void 0,(function*(){const e=new l({epci_id:r,mesure_id:a,uid:(0,he.v4)(),name:o,description:c});yield g.store(e),window.location.href=`/mesure_personnalisee.html?epci_id=${r}&mesure_uid=${a}`})),function(){o=this.value,n(0,o)},function(){c=this.value,n(1,c)}]}class me{constructor(e,t){this.id=e,this.name=t}}new me("strategie","Stratégie"),new me("urbanisme","Urbanisme et aménagement"),new me("batiments","Bâtiments et patrimoine"),new me("energie","Gestion, production et distribution de l'énergie"),new me("mobilites","Mobilités"),new me("agri_alim","Agriculture et alimentation"),new me("foret_biodiv","Forêts, espaces verts et biodiversité"),new me("conso_resp","Consommation écoresponsable"),new me("dechets","Déchets"),new me("eau","Eau et assainissement"),new me("preca_energie","Précarité énergétique"),new me("dev_eco","Activités économiques"),new me("tourisme","Tourisme"),new me("orga_interne","Organisation interne"),new me("forma_sensib","Formation, sensibilisation, communication"),new me("parten_coop","Partenariat et coopération"),new me("eci","Économie circulaire"),new class extends ae{constructor(e){super(),se(this,e,pe,fe,A,{})}}({target:document.body.querySelector('[data-page="action_create"]')})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,