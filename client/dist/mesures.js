(()=>{"use strict";const e=e=>null!=e.id&&null!=e.pathname;class t{constructor({epci_id:e,indicateur_id:t,year:n,value:i}){this.epci_id=e,this.indicateur_id=t,this.year=n,this.value=i}get pathname(){return t.pathname}}t.pathname="indicateur_value";class n extends t{static buildId(e,t,n){return`${e}/${t}/${n}`}get id(){return n.buildId(this.epci_id,this.indicateur_id,this.year)}}class i{constructor({host:e,endpoint:t,serializer:n,deserializer:i}){this.host=e,this.pathname=t,this.serializer=n,this.deserializer=i}async store(t){if(!e(t))throw new Error(typeof t+" is not storable.");const n=await fetch(`${this.host}/${this.pathname}/`,{method:"POST",mode:"cors",body:JSON.stringify(this.serializer(t))});return this.deserializer(await n.json())}async retrieveAll(){return this.retrieveAtPath("all")}async retrieveById(e){return this.retrieveByPath(e)}async retrieveByPath(e){const t=await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"GET"});return 404==t.status?null:this.deserializer(await t.json())}async retrieveAtPath(e){const t=await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"GET"}),n=await t.json(),i=[];for(let e=0;e<n.length;e++)i.push(this.deserializer(n[e]));return i}async deleteById(e){return 200==(await fetch(`${this.host}/${this.pathname}/${e}`,{mode:"cors",method:"DELETE"})).status}}const r=()=>{const e=new URLSearchParams(window.location.search).get("epci_id");if(!e)throw new Error("Parameter epci_id is empty.");return e};class s{constructor({action_id:e,epci_id:t,avancement:n}){this.action_id=e,this.epci_id=t,this.avancement=n}get pathname(){return s.pathname}}s.pathname="action_status";class a extends s{static buildId(e,t){return`${e}/${t}`}get id(){return a.buildId(this.epci_id,this.action_id)}}class o{constructor({uid:e,epci_id:t,mesure_id:n,name:i,description:r}){this.uid=e,this.epci_id=t,this.mesure_id=n,this.name=i,this.description=r}get pathname(){return o.pathname}}o.pathname="action_custom";class c extends o{static buildId(e,t,n){return`${e}/${t}/${n}`}get id(){return c.buildId(this.epci_id,this.mesure_id,this.uid)}}const l=()=>{const e=window.location.hostname;if("localhost"===e.substring(0,10))return"http://localhost:8000";if("sandbox.territoiresentransitions.fr"===e)return"https://sandboxterritoires.osc-fr1.scalingo.io";if("staging.territoiresentransitions.fr"===e)return"https://territoiresentransitions.osc-fr1.scalingo.io";throw`no API host for ${e}`};class u{constructor({uid:e,epci_id:t,climat_pratic_thematic_id:n,name:i}){this.uid=e,this.epci_id=t,this.climat_pratic_thematic_id=n,this.name=i}get pathname(){return u.pathname}}u.pathname="mesure_custom";class d extends u{static buildId(e,t){return`${e}/${t}`}get id(){return d.buildId(this.epci_id,this.uid)}}class h{constructor({host:e,endpoint:t,serializer:n,deserializer:r}){this.cache=null,this.retrieving=null,this.host=e,this.pathname=t,this.serializer=n,this.deserializer=r,this.api=new i({host:this.host,endpoint:this.pathname,serializer:this.serializer,deserializer:this.deserializer})}async store(t){if(!e(t))throw new Error(typeof t+" is not storable.");const n=await this.api.store(t);return this.writeInCache(n)}retrieveAll(){return this.getCache()}async retrieveById(e){return this.retrieveByPath(e)}async retrieveByPath(e){const t=await this.getCache();for(let n of t)if(n.id.startsWith(e))return n;return null}async retrieveAtPath(e){const t=await this.getCache(),n=[];for(let i of t)i.id.startsWith(e)&&n.push(i);return n}async deleteById(e){const t=await this.api.deleteById(this.stripId(e)),n=await this.getCache();return this.cache=n.filter((t=>t.id!==e)),t}stripId(e){const t=this.pathname.split("/");let n=e.split("/"),i=!1;for(let e=0;e<t.length;e++)if(t[e]==n[0])i=!0,n=n.slice(1);else if(i)break;return n.join("/")}async writeInCache(e){await this.removeFromCache(e.id);const t=await this.getCache();return t.push(e),this.cache=t,e}async removeFromCache(e){const t=await this.getCache(),n=t.filter((t=>t.id!==e)),i=n.length!=t.length;return this.cache=n,i}async getCache(){return null!==this.cache?this.cache:(null===this.retrieving&&(this.retrieving=this.api.retrieveAll(),this.retrieving.then((e=>{this.cache=e}))),this.retrieving)}}const m=new h({host:l(),endpoint:`v1/${t.pathname}/${r()}`,serializer:e=>e,deserializer:e=>new n(e)}),f=new h({host:l(),endpoint:`v1/${s.pathname}/${r()}`,serializer:e=>e,deserializer:e=>new a(e)}),p=(new h({host:l(),endpoint:`v1/${o.pathname}/${r()}`,serializer:e=>e,deserializer:e=>new c(e)}),new h({host:l(),endpoint:`v1/${u.pathname}/${r()}`,serializer:e=>e,deserializer:e=>new d(e)})),$=r();document.querySelectorAll(".status").forEach((e=>(e=>{let t=e.dataset.actionId||"",n=e.querySelectorAll('input[type="radio"]');((e,t)=>{let n=t=>{const n=t.target.value,i=new a({epci_id:$,action_id:e,avancement:n});f.store(i)};t.forEach((e=>{e.addEventListener("change",n)}))})(t,n),(async(e,t)=>{let n="pas_faite";try{const i=await f.retrieveById(`${$}/${e}`);i&&(n=i.avancement)}catch(e){}finally{const i=`action-${e}_${n}`;t.forEach((e=>{e.id===i&&(e.checked=!0)}))}})(t,n)})(e)));const g=e=>{e.preventDefault()},_=e=>{const t=e.target,{id:i,year:s}=w(t),a=r(),o=new n({epci_id:a,indicateur_id:i,year:s,value:t.value});m.store(o)},b=e=>{"Enter"===e.key&&e.target.blur()},y=async e=>{e.value="",e.addEventListener("blur",_),e.addEventListener("keypress",b)},w=e=>({id:e.dataset.indicatorId,year:+e.dataset.indicatorYear});function v(){}function E(e){return e()}function x(){return Object.create(null)}function z(e){e.forEach(E)}function k(e){return"function"==typeof e}function I(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function C(e){return 0===Object.keys(e).length}function A(e,t){e.appendChild(t)}function q(e,t,n){e.insertBefore(t,n||null)}function P(e){e.parentNode.removeChild(e)}function S(e){return document.createElement(e)}function L(e){return document.createTextNode(e)}function B(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function T(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function N(e,t,n){e.classList[n?"add":"remove"](t)}let j;function O(e){j=e}document.querySelectorAll('[data-component="indicatorForm"]').forEach((e=>{(async e=>{e.addEventListener("submit",g);const t=e.querySelectorAll("input");for(let e of t)y(e);const{id:n,year:i}=w(t[0]),s=r(),a=await m.retrieveAtPath(`${s}/${n}`);for(let e of t){const{id:t,year:n}=w(e);let i="";for(let e of a)e.year==n&&e.indicateur_id==t&&(i=e.value);e.value=i}})(e)})),new Set,new Set;const F=[],V=[],D=[],M=[],G=Promise.resolve();let H=!1;function U(e){D.push(e)}let W=!1;const J=new Set;function R(){if(!W){W=!0;do{for(let e=0;e<F.length;e+=1){const t=F[e];O(t),Y(t.$$)}for(O(null),F.length=0;V.length;)V.pop()();for(let e=0;e<D.length;e+=1){const t=D[e];J.has(t)||(J.add(t),t())}D.length=0}while(F.length);for(;M.length;)M.pop()();H=!1,W=!1,J.clear()}}function Y(e){if(null!==e.fragment){e.update(),z(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(U)}}const K=new Set;let Q,X;function Z(e,t){e&&e.i&&(K.delete(e),e.i(t))}function ee(e,t,n,i){if(e&&e.o){if(K.has(e))return;K.add(e),Q.c.push((()=>{K.delete(e),i&&(n&&e.d(1),i())})),e.o(t)}}function te(e){e&&e.c()}function ne(e,t,n){const{fragment:i,on_mount:r,on_destroy:s,after_update:a}=e.$$;i&&i.m(t,n),U((()=>{const t=r.map(E).filter(k);s?s.push(...t):z(t),e.$$.on_mount=[]})),a.forEach(U)}function ie(e,t){const n=e.$$;null!==n.fragment&&(z(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function re(e,t,n,i,r,s,a=[-1]){const o=j;O(e);const c=e.$$={fragment:null,ctx:null,props:s,update:v,not_equal:r,bound:x(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(o?o.$$.context:[]),callbacks:x(),dirty:a,skip_bound:!1};let l=!1;if(c.ctx=n?n(e,t.props||{},((t,n,...i)=>{const s=i.length?i[0]:n;return c.ctx&&r(c.ctx[t],c.ctx[t]=s)&&(!c.skip_bound&&c.bound[t]&&c.bound[t](s),l&&function(e,t){-1===e.$$.dirty[0]&&(F.push(e),H||(H=!0,G.then(R)),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n})):[],c.update(),l=!0,z(c.before_update),c.fragment=!!i&&i(c.ctx),t.target){if(t.hydrate){const e=(u=t.target,Array.from(u.childNodes));c.fragment&&c.fragment.l(e),e.forEach(P)}else c.fragment&&c.fragment.c();t.intro&&Z(e.$$.fragment),ne(e,t.target,t.anchor),R()}var u;O(o)}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global,new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]),"function"==typeof HTMLElement&&(X=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,n){this[e]=n}$destroy(){ie(this,1),this.$destroy=v}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!C(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});class se{$destroy(){ie(this,1),this.$destroy=v}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!C(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function ae(e){let t,n,i,r,s;return{c(){t=S("button"),n=L(e[0]),B(t,"class",i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:"")),N(t,"w-full",e[1])},m(i,a){var o,c,l,u;q(i,t,a),A(t,n),r||(o=t,c="click",l=e[8],o.addEventListener(c,l,u),s=()=>o.removeEventListener(c,l,u),r=!0)},p(e,r){1&r&&T(n,e[0]),36&r&&i!==(i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:""))&&B(t,"class",i),38&r&&N(t,"w-full",e[1])},d(e){e&&P(t),r=!1,s()}}}function oe(e){let t,n,i;return{c(){t=S("a"),n=L(e[0]),B(t,"href",e[4]),B(t,"class",i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:"")),N(t,"w-full",e[1])},m(e,i){q(e,t,i),A(t,n)},p(e,r){1&r&&T(n,e[0]),16&r&&B(t,"href",e[4]),36&r&&i!==(i="\r\n  \t"+e[5]+"\r\n  \t"+(e[2]?` ${e[2]}`:""))&&B(t,"class",i),38&r&&N(t,"w-full",e[1])},d(e){e&&P(t)}}}function ce(e){let t;function n(e,t){return e[3]?oe:ae}let i=n(e),r=i(e);return{c(){r.c(),t=L("")},m(e,n){r.m(e,n),q(e,t,n)},p(e,[s]){i===(i=n(e))&&r?r.p(e,s):(r.d(1),r=i(e),r&&(r.c(),r.m(t.parentNode,t)))},i:v,o:v,d(e){r.d(e),e&&P(t)}}}function le(e,t,n){var i,r;!function(e){e[e.nettle=0]="nettle",e[e.bramble=1]="bramble"}(i||(i={})),function(e){e[e.normal=0]="normal",e[e.small=1]="small"}(r||(r={}));let{label:s=""}=t,{full:a=!1}=t,{classNames:o=""}=t,{colorVariant:c="nettle"}=t,{size:l="normal"}=t,{asLink:u=!1}=t,{href:d=""}=t,h="";return"nettle"==c&&(h+=" border-green-700 border-2 hover:bg-green-100 active:bg-green-600"),"bramble"==c&&(h+=" border-gray-800 border hover:bg-green-100 active:bg-green-600"),"normal"==l&&(h+=" px-6 py-3"),"small"==l&&(h+=" text-base px-3 py-3"),e.$$set=e=>{"label"in e&&n(0,s=e.label),"full"in e&&n(1,a=e.full),"classNames"in e&&n(2,o=e.classNames),"colorVariant"in e&&n(6,c=e.colorVariant),"size"in e&&n(7,l=e.size),"asLink"in e&&n(3,u=e.asLink),"href"in e&&n(4,d=e.href)},[s,a,o,u,d,h,c,l,function(t){!function(e,t){const n=e.$$.callbacks[t.type];n&&n.slice().forEach((e=>e(t)))}(e,t)}]}const ue=class extends se{constructor(e){super(),re(this,e,le,ce,I,{label:0,full:1,classNames:2,colorVariant:6,size:7,asLink:3,href:4})}};function de(e){let t,n,i,r,s,a,o,c,l=e[0].name+"";return a=new ue({props:{label:"Supprimer",colorVariant:"bramble",size:"small",classNames:"ml-6"}}),a.$on("click",e[1]),{c(){t=S("main"),n=S("a"),i=S("h3"),r=L(l),s=L(" "),te(a.$$.fragment),B(i,"class","lg:col-span-8 text-xl font-semibold mb-6 pr-28"),B(n,"class","bg-white p-4 rounded my-4 grid grid-cols-1 lg:grid-cols-12 lg:gap-1"),B(n,"href",o="mesure_personnalisee.html?epci_id="+e[0].epci_id+"&mesure_uid="+e[0].uid)},m(e,o){q(e,t,o),A(t,n),A(n,i),A(i,r),A(i,s),ne(a,i,null),c=!0},p(e,[t]){(!c||1&t)&&l!==(l=e[0].name+"")&&T(r,l),(!c||1&t&&o!==(o="mesure_personnalisee.html?epci_id="+e[0].epci_id+"&mesure_uid="+e[0].uid))&&B(n,"href",o)},i(e){c||(Z(a.$$.fragment,e),c=!0)},o(e){ee(a.$$.fragment,e),c=!1},d(e){e&&P(t),ie(a)}}}function he(e,t,n){let{mesure:i}=t;const r=function(){const e=function(){if(!j)throw new Error("Function called outside component initialization");return j}();return(t,n)=>{const i=e.$$.callbacks[t];if(i){const r=function(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}(t,n);i.slice().forEach((t=>{t.call(e,r)}))}}}();return e.$$set=e=>{"mesure"in e&&n(0,i=e.mesure)},[i,e=>{e.preventDefault(),confirm("Êtes-vous sûr•e de vouloir supprimer une de vos mesures personnalisées ?")&&(p.deleteById(i.id),r("delete",i.id))}]}const me=class extends se{constructor(e){super(),re(this,e,he,de,I,{mesure:0})}};function fe(e,t,n){const i=e.slice();return i[4]=t[n],i}function pe(e){let t,n;return t=new me({props:{mesure:e[4]}}),t.$on("delete",e[1]),{c(){te(t.$$.fragment)},m(e,i){ne(t,e,i),n=!0},p(e,n){const i={};1&n&&(i.mesure=e[4]),t.$set(i)},i(e){n||(Z(t.$$.fragment,e),n=!0)},o(e){ee(t.$$.fragment,e),n=!1},d(e){ie(t,e)}}}function $e(e){let t,n,i=e[0],r=[];for(let t=0;t<i.length;t+=1)r[t]=pe(fe(e,i,t));const s=e=>ee(r[e],1,1,(()=>{r[e]=null}));return{c(){t=S("ul");for(let e=0;e<r.length;e+=1)r[e].c()},m(e,i){q(e,t,i);for(let e=0;e<r.length;e+=1)r[e].m(t,null);n=!0},p(e,[n]){if(3&n){let a;for(i=e[0],a=0;a<i.length;a+=1){const s=fe(e,i,a);r[a]?(r[a].p(s,n),Z(r[a],1)):(r[a]=pe(s),r[a].c(),Z(r[a],1),r[a].m(t,null))}for(Q={r:0,c:[],p:Q},a=i.length;a<r.length;a+=1)s(a);Q.r||z(Q.c),Q=Q.p}},i(e){if(!n){for(let e=0;e<i.length;e+=1)Z(r[e]);n=!0}},o(e){r=r.filter(Boolean);for(let e=0;e<r.length;e+=1)ee(r[e]);n=!1},d(e){e&&P(t),function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}(r,e)}}}function ge(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function a(e){try{c(i.next(e))}catch(e){s(e)}}function o(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((i=i.apply(e,t||[])).next())}))};let{climat_pratic_thematique_id:r}=t,s=[];const a=()=>i(void 0,void 0,void 0,(function*(){const e=yield p.retrieveAll();n(0,s=e.filter((e=>e.climat_pratic_thematic_id==r)))}));return a(),e.$$set=e=>{"climat_pratic_thematique_id"in e&&n(2,r=e.climat_pratic_thematique_id)},[s,a,r]}const _e=class extends se{constructor(e){super(),re(this,e,ge,$e,I,{climat_pratic_thematique_id:2})}};class be{constructor(e,t){this.id=e,this.name=t}}const ye={strategie:new be("strategie","Stratégie"),urbanisme:new be("urbanisme","Urbanisme et aménagement"),batiments:new be("batiments","Bâtiments et patrimoine"),energie:new be("energie","Gestion, production et distribution de l'énergie"),mobilites:new be("mobilites","Mobilités"),agri_alim:new be("agri_alim","Agriculture et alimentation"),foret_biodiv:new be("foret_biodiv","Forêts, espaces verts et biodiversité"),conso_resp:new be("conso_resp","Consommation écoresponsable"),dechets:new be("dechets","Déchets"),eau:new be("eau","Eau et assainissement"),preca_energie:new be("preca_energie","Précarité énergétique"),dev_eco:new be("dev_eco","Activités économiques"),tourisme:new be("tourisme","Tourisme"),orga_interne:new be("orga_interne","Organisation interne"),forma_sensib:new be("forma_sensib","Formation, sensibilisation, communication"),parten_coop:new be("parten_coop","Partenariat et coopération"),eci:new be("eci","Économie circulaire")};Object.values(ye).forEach((e=>{new _e({target:document.body.querySelector(`[data-custom-mesure-thematique="${e.id}"]`),props:{climat_pratic_thematique_id:e.id}})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,