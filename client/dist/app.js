(()=>{"use strict";const t=t=>null!=t.id&&null!=t.pathname;class e{constructor({epci_id:t,indicateur_id:e,year:i,value:r}){this.epci_id=t,this.indicateur_id=e,this.year=i,this.value=r}get pathname(){return e.pathname}}e.pathname="indicateur_value";class i extends e{static buildId(t,e,i){return`${t}/${e}/${i}`}get id(){return i.buildId(this.epci_id,this.indicateur_id,this.year)}}class r{constructor({host:t,endpoint:e,serializer:i,deserializer:r}){this.host=t,this.pathname=e,this.serializer=i,this.deserializer=r}async store(e){if(!t(e))throw new Error(typeof e+" is not storable.");const i=await fetch(`${this.host}/${this.pathname}/`,{method:"POST",mode:"cors",body:JSON.stringify(this.serializer(e))});return this.deserializer(await i.json())}async retrieveAll(){return this.retrieveAtPath("all")}async retrieveById(t){return this.retrieveByPath(t)}async retrieveByPath(t){const e=await fetch(`${this.host}/${this.pathname}/${t}`,{mode:"cors",method:"GET"});return 404==e.status?null:this.deserializer(await e.json())}async retrieveAtPath(t){const e=await fetch(`${this.host}/${this.pathname}/${t}`,{mode:"cors",method:"GET"}),i=await e.json(),r=[];for(let t=0;t<i.length;t++)r.push(this.deserializer(i[t]));return r}async deleteById(t){return 200==(await fetch(`${this.host}/${this.pathname}/${t}`,{mode:"cors",method:"DELETE"})).status}}const s=()=>{const t=new URLSearchParams(window.location.search).get("epci_id");if(!t)throw new Error("Parameter epci_id is empty.");return t};class a{constructor({action_id:t,epci_id:e,avancement:i}){this.action_id=t,this.epci_id=e,this.avancement=i}get pathname(){return a.pathname}}a.pathname="action_status";class n extends a{static buildId(t,e){return`${t}/${e}`}get id(){return n.buildId(this.epci_id,this.action_id)}}class h{constructor({uid:t,epci_id:e,mesure_id:i,name:r,description:s}){this.uid=t,this.epci_id=e,this.mesure_id=i,this.name=r,this.description=s}get pathname(){return h.pathname}}h.pathname="action_custom";class c extends h{static buildId(t,e,i){return`${t}/${e}/${i}`}get id(){return c.buildId(this.epci_id,this.mesure_id,this.uid)}}const o=()=>{const t=window.location.hostname;if("localhost"===t.substring(0,10))return"http://localhost:8000";if("sandbox.territoiresentransitions.fr"===t)return"https://sandboxterritoires.osc-fr1.scalingo.io";if("staging.territoiresentransitions.fr"===t)return"https://territoiresentransitions.osc-fr1.scalingo.io";throw`no API host for ${t}`};class d{constructor({uid:t,epci_id:e,climat_pratic_thematic_id:i,name:r}){this.uid=t,this.epci_id=e,this.climat_pratic_thematic_id=i,this.name=r}get pathname(){return d.pathname}}d.pathname="mesure_custom";class l extends d{static buildId(t,e){return`${t}/${e}`}get id(){return l.buildId(this.epci_id,this.uid)}}class u{constructor({host:t,endpoint:e,serializer:i,deserializer:s}){this.cache=null,this.retrieving=null,this.host=t,this.pathname=e,this.serializer=i,this.deserializer=s,this.api=new r({host:this.host,endpoint:this.pathname,serializer:this.serializer,deserializer:this.deserializer})}async store(e){if(!t(e))throw new Error(typeof e+" is not storable.");const i=await this.api.store(e);return this.writeInCache(i)}retrieveAll(){return this.getCache()}async retrieveById(t){return this.retrieveByPath(t)}async retrieveByPath(t){const e=await this.getCache();for(let i of e)if(i.id.startsWith(t))return i;return null}async retrieveAtPath(t){const e=await this.getCache(),i=[];for(let r of e)r.id.startsWith(t)&&i.push(r);return i}async deleteById(t){const e=await this.api.deleteById(this.stripId(t)),i=await this.getCache();return this.cache=i.filter((e=>e.id!==t)),e}stripId(t){const e=this.pathname.split("/");let i=t.split("/"),r=!1;for(let t=0;t<e.length;t++)if(e[t]==i[0])r=!0,i=i.slice(1);else if(r)break;return i.join("/")}async writeInCache(t){await this.removeFromCache(t.id);const e=await this.getCache();return e.push(t),this.cache=e,t}async removeFromCache(t){const e=await this.getCache(),i=e.filter((e=>e.id!==t)),r=i.length!=e.length;return this.cache=i,r}async getCache(){return null!==this.cache?this.cache:(null===this.retrieving&&(this.retrieving=this.api.retrieveAll(),this.retrieving.then((t=>{this.cache=t}))),this.retrieving)}}const p=new u({host:o(),endpoint:`v1/${e.pathname}/${s()}`,serializer:t=>t,deserializer:t=>new i(t)}),m=new u({host:o(),endpoint:`v1/${a.pathname}/${s()}`,serializer:t=>t,deserializer:t=>new n(t)}),y=(new u({host:o(),endpoint:`v1/${h.pathname}/${s()}`,serializer:t=>t,deserializer:t=>new c(t)}),new u({host:o(),endpoint:`v1/${d.pathname}/${s()}`,serializer:t=>t,deserializer:t=>new l(t)}),s());document.querySelectorAll(".status").forEach((t=>(t=>{let e=t.dataset.actionId||"",i=t.querySelectorAll('input[type="radio"]');((t,e)=>{let i=e=>{const i=e.target.value,r=new n({epci_id:y,action_id:t,avancement:i});m.store(r)};e.forEach((t=>{t.addEventListener("change",i)}))})(e,i),(async(t,e)=>{let i="pas_faite";try{const r=await m.retrieveById(`${y}/${t}`);r&&(i=r.avancement)}catch(t){}finally{const r=`action-${t}_${i}`;e.forEach((t=>{t.id===r&&(t.checked=!0)}))}})(e,i)})(t)));const v=t=>{t.preventDefault()},f=t=>{const e=t.target,{id:r,year:a}=$(e),n=s(),h=new i({epci_id:n,indicateur_id:r,year:a,value:e.value});p.store(h)},w=t=>{"Enter"===t.key&&t.target.blur()},_=async t=>{t.value="",t.addEventListener("blur",f),t.addEventListener("keypress",w)},$=t=>({id:t.dataset.indicatorId,year:+t.dataset.indicatorYear});document.querySelectorAll('[data-component="indicatorForm"]').forEach((t=>{(async t=>{t.addEventListener("submit",v);const e=t.querySelectorAll("input");for(let t of e)_(t);const{id:i,year:r}=$(e[0]),a=s(),n=await p.retrieveAtPath(`${a}/${i}`);for(let t of e){const{id:e,year:i}=$(t);let r="";for(let t of n)t.year==i&&t.indicateur_id==e&&(r=t.value);t.value=r}})(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,